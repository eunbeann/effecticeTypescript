```tsx
function add(a, b) {
    return a + b;
}

add(10, null);
```

질문 : 위의 코드가 타입 체커를 통과할 수 있을까?

→ 타입스크립트 컴파일러는 매우 많은 설정을 가지고 있다. 
현 시점 설정이 100개에 이른다. 따라서 **설정이 어떻게 되어 있는지 모른다면 위의 질문에 대답할 수 없다.**

타임스크립트 컴파일러 설정은 커멘드 라인 혹은 설정 파일을 통해 할 수 있다.

```bash
//커맨드라인
$ tsc --noImplicitAny program.ts
```

```json
//설정 파일

//tsconfig.json
{
	"compilerOptions": {
		"noImplicityAny": true
	}
}
```

가급적이면 설정 파일을 따로 사용하는 것이 좋다. 

설정 파일은 커맨드 라인에 `tsc —init` 명령어를 입력하면 생성된다.

타입스크립트의 설정들은 **어디서 소스 파일을 찾을지**, **어떤 종류의 출력을 생성할지** 제어하는 내용이 대부분이다. 그 외에도 `언어 자체의 핵심 요소들을 제어하는 설정`도 있다.

## noImplicitAny & strictNullChecks

- **noImplicitAny**
    - 변수들이 미리 정의된 타입을 가져야 하는지 여부를 제어
        - 되도록이면 noImplicitAny 옵션 설정해야 한다. 
        → 타입스크립트는 **타입 정보를 가질 때 가장 효과적**이기 때문
    - `수월한 문제 발견`, `코드 가독성이 좋아짐`, `개발자의 생산성 향상`
- **strictNullChecks**
    - null과 undifined가 모든 타입에서 허용되는지 확인하는 설정
    - strictNullChecks 옵션을 설정하면 아래와 같은 결과가 나온다.
    
    ```tsx
    const x: number = null;
    // 'null' 형식은 'number' 형식에 할당할 수 없습니다.
    
    // null 허용 하기 위해서는 명시적으로 표시해줘야 한다.
    const x: number | null = null;
    ```
    
    - null 허용 x 일 경우,  **null 체크하는 코드나 단언문을 추가**해야 하는 번거로움이 있다.
    - null과 undifined 관련된 오류를 잡아내는 데 많은 도움이 되지만, **코드 작성이 어렵다**는 단점이 있다.

<aside>
📍 프로젝트가 거대해질수록 설정 변경이 어렵기 때문에 가능한 초반에 설정하는 것이 좋다.

</aside>

언어에 의미적으로 영향을 미치는 설정들이 많지만(ex. noImplicitThis, strictFunctionTypes), noImplicitAny와 strictNullChecks 만큼 중요한 설정은 없다. [(참고)](https://geonlee.tistory.com/214)